/* General
============================================================================================== */
@mixin flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flexbox {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// $gen - assign the same value for each prefix
@mixin justify-content(
  $just-cont: flex-start,
  $webkit-b-p: start,
  $ms-f-p: start,
  $gen: null
) {
  @if $gen {
    -webkit-box-pack: $gen;
    -ms-flex-pack: $gen;
    justify-content: $gen;
  } @else {
    -webkit-box-pack: $webkit-b-p;
    -ms-flex-pack: $ms-f-p;
    justify-content: $just-cont;
  }
}

// $gen - assign the same value for each prefix
@mixin align-items(
  $aln-itms: stretch,
  $webkit-b-a: stretch,
  $ms-f-a: stretch,
  $gen: null
) {
  @if $gen {
    -webkit-box-align: $gen;
    -ms-flex-align: $gen;
    align-items: $gen;
  } @else {
    -webkit-box-align: $webkit-b-a;
    -ms-flex-align: $ms-f-a;
    align-items: $aln-itms;
  }
}

// $gen - assign the same value for each prefix
@mixin flex-direction(
  $f-dir: row,
  $webkit-b-o: horizontal,
  $webkit-b-d: normal,
  $ms-f-d: row,
  $gen: null
) {
  @if $gen {
    -webkit-box-orient: $gen;
    -webkit-box-direction: $gen;
    -ms-flex-direction: $gen;
    flex-direction: $gen;
  } @else {
    -webkit-box-orient: $webkit-b-o;
    -webkit-box-direction: $webkit-b-d;
    -ms-flex-direction: $ms-f-d;
    flex-direction: $f-dir;
  }
}

@mixin flex($f-grow: 0, $f-shrink: 1, $f-basis: auto, $gen: null) {
  @if $gen {
    @if $gen == auto {
      -webkit-box-flex: 1;
    } @else if $gen == none {
      -webkit-box-flex: 0;
    } @else {
      -webkit-box-flex: $gen;
    }

    -ms-flex: $gen;
    flex: $gen;
  } @else {
    -webkit-box-flex: $f-grow;
    -ms-flex: $f-grow $f-shrink $f-basis;
    flex: $f-grow $f-shrink $f-basis;
  }
}

@mixin grid {
  display: -ms-grid;
  display: grid;
}

@mixin grid-template($type, $value) {
  @if $type == rows or $type == columns {
    -ms-grid-#{$type}: $value;
    grid-template-#{$type}: $value;
  }
}

@mixin transform($transforms) {
  @include prefix(
    (
      transform: $transforms,
    ),
    webkit ms
  );
}

@mixin transform-origin($x: 50%, $y: 50%, $z: 0, $gen: null) {
  @if $gen {
    @include prefix(
      (
        transform-origin: $gen,
      ),
      webkit ms
    );
  } @else {
    @include prefix(
      (
        transform-origin: $x $y $z,
      ),
      webkit ms
    );
  }
}

@mixin position($pos, $top: null, $right: null, $bottom: null, $left: null) {
  position: $pos;

  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// $gen - set all
@mixin space(
  $type,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $gen: null
) {
  @if $type == margin or $type == padding {
    @if $gen {
      #{$type}: $gen;
    } @else {
      #{$type}-top: $top;
      #{$type}-right: $right;
      #{$type}-bottom: $bottom;
      #{$type}-left: $left;
    }
  }
}

@mixin size($width: null, $height: null) {
  width: $width;
  height: $height;
}

@mixin hardware($bf-vsby: true, $pers: null) {
  @if $bf-vsby {
    @include prefix(
      (
        backface-visibility: hidden,
      ),
      webkit
    );
  }

  @include prefix(
    (
      perspective: $pers,
    ),
    webkit
  );
}

@mixin transition($gen, $trsns...) {
  @if $gen {
    @include prefix(
      (
        transition: $gen,
      ),
      webkit o
    );
  } @else {
    $procdTrsns: ();
    @each $trsn in $trsns {
      $procdTrsns: append($procdTrsns, procTrsn($trsn), comma);
    }

    @include prefix(
      (
        transition: $procdTrsns,
      ),
      webkit o
    );
  }
}

@mixin box-shadow($gen, $b-shdws...) {
  @if $gen {
    @include prefix(
      (
        box-shadow: $gen,
      ),
      webkit
    );
  } @else {
    $procdBShdws: ();
    @each $b-shdw in $b-shdws {
      $procdBShdws: append($procdBShdws, procBShdw($b-shdw), comma);
    }

    @include prefix(
      (
        box-shadow: $procdBShdws,
      ),
      webkit
    );
  }
}

@mixin prefix($declars, $prefixes: ()) {
  @each $property, $value in $declars {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}

/* React transition group
============================================================================================== */
@mixin basicTransition(
  $classNames,
  $transformsStart,
  $transformsEnd,
  $opacity: true,
  $duration: $transition-duration-primary,
  $delay: 0s,
  $done: false
) {
  .#{$classNames}-enter,
  .#{$classNames}-appear {
    @if $opacity {
      opacity: 0;
    }

    @include transform($transformsStart);
  }

  .#{$classNames}-enter-active,
  .#{$classNames}-appear-active {
    @if $opacity {
      opacity: 1;
    }

    @include transform($transformsEnd);
    @include transition(
      null,
      (
        "property": transform,
        "duration": $duration,
        "delay": $delay,
      ),
      (
        "property": opacity,
        "duration": $duration,
        "delay": $delay,
      )
    );
  }

  @if $done {
    .#{$classNames}-enter-done,
    .#{$classNames}-appear-done {
      @if $opacity {
        opacity: 1;
      }

      @include transform($transformsEnd);
    }
  }

  .#{$classNames}-exit {
    @if $opacity {
      opacity: 1;
    }

    @include transform($transformsEnd);
  }

  .#{$classNames}-exit-active {
    @if $opacity {
      opacity: 0;
    }

    @include transform($transformsStart);
    @include transition(
      null,
      (
        "property": transform,
        "duration": $duration,
        "delay": $delay,
      ),
      (
        "property": opacity,
        "duration": $duration,
        "delay": $delay,
      )
    );
  }
}

@mixin nav3dListTransition {
  .navbar-3d__list-enter,
  .navbar-3d__list-appear {
    @include transform(rotateX(90deg));
  }

  .navbar-3d__list-enter-active,
  .navbar-3d__list-appear-active {
    @include transform(rotateX(0deg));
    @include transition(
      null,
      (
        "property": transform,
        "delay": $transition-delay-primary,
      )
    );
  }

  .navbar-3d__list-enter-done,
  .navbar-3d__list-appear-done {
    @include transform(rotateX(0deg));
  }

  .navbar-3d__list-exit {
    @include transform(rotateX(0deg));
  }

  .navbar-3d__list-exit-active {
    @include transform(rotateX(90deg));
    @include transition(
      null,
      (
        "property": transform,
      )
    );
  }
}
